#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script r√°pido para testar logs de fus√£o de metadados
Executa uma sincroniza√ß√£o for√ßada do Drive para gerar logs
"""

import json
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from workers import DriveSyncWorker
import sys
import os
sys.path.append('src')


def test_fusion_logs():
    print("üöÄ TESTE R√ÅPIDO: LOGS DE FUS√ÉO DE METADADOS")
    print("=" * 60)

    token_file = 'config/token.json'
    if not os.path.exists(token_file):
        print("‚ùå Arquivo token.json n√£o encontrado. Execute autentica√ß√£o primeiro.")
        return

    try:
        with open(token_file, 'r') as f:
            creds_data = json.load(f)
        creds = Credentials.from_authorized_user_info(creds_data)
    except Exception as e:
        print(f"‚ùå Erro ao carregar credenciais: {e}")
        return

    try:
        service = build('drive', 'v3', credentials=creds)
    except Exception as e:
        print(f"‚ùå Erro ao criar service Drive: {e}")
        return

    print("‚úÖ Service Drive criado com sucesso")

    db_name = 'data/test_file_index.db'
    force_sync = True
    selected_folders = None

    worker = DriveSyncWorker(service, db_name, force_sync, selected_folders)

    print("üîÑ Iniciando sincroniza√ß√£o for√ßada para testar logs...")
    print("üìù Verifique app.log para ver os logs de fus√£o/conflitos")
    print("‚ö†Ô∏è  Pressione Ctrl+C para interromper se demorar muito")

    try:
        from PyQt6.QtWidgets import QApplication
        import signal

        app = QApplication(sys.argv)

        def on_finished():
            print("‚úÖ Sincroniza√ß√£o conclu√≠da")
            app.quit()

        def on_failed(error):
            print(f"‚ùå Sincroniza√ß√£o falhou: {error}")
            app.quit()

        worker.sync_finished.connect(on_finished)
        worker.sync_failed.connect(on_failed)

        worker.run()

        app.exec()

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Teste interrompido pelo usu√°rio")
        worker.terminate()
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")

    print("\nüìã Verifique os logs em app.log para:")
    print("   - Falhas de fus√£o (quando n√£o h√° matches)")
    print("   - Conflitos de metadados (m√∫ltiplos matches ou descri√ß√µes diferentes)")
    print("   - Erros durante atualiza√ß√£o")


if __name__ == "__main__":
    test_fusion_logs()
