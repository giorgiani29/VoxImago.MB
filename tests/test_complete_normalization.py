#!/usr/bin/env python3
"""
Teste da normaliza√ß√£o com o aplicativo real
Este teste assume que voc√™ j√° tem dados indexados
"""

from database import FileIndexer, normalize_text
import os


def test_app_normalization():
    print("üîç TESTE DE NORMALIZA√á√ÉO - APLICATIVO REAL")
    print("=" * 60)

    # Usar o mesmo banco que o app usa
    indexer = FileIndexer('file_index.db')

    # Verificar se h√° dados no banco
    indexer.cursor.execute("SELECT COUNT(*) FROM files")
    total_files = indexer.cursor.fetchone()[0]
    print(f"üìÅ Total de arquivos no banco: {total_files}")

    if total_files == 0:
        print("‚ùå Nenhum arquivo encontrado no banco principal.")
        print(
            "üí° Execute primeiro uma sincroniza√ß√£o no aplicativo ou adicione pastas locais.")
        indexer.close()
        return False

    # Procurar arquivos com acentos nos dados reais
    print("\nüîç Procurando arquivos com acentos nos dados reais...")

    indexer.cursor.execute("""
        SELECT file_id, name, description, source FROM files 
        WHERE (name LIKE '%√£%' OR name LIKE '%√ß%' OR name LIKE '%√°%' 
               OR name LIKE '%√©%' OR name LIKE '%√≠%' OR name LIKE '%√≥%' 
               OR name LIKE '%√∫%' OR name LIKE '%√¢%' OR name LIKE '%√™%' 
               OR name LIKE '%√Æ%' OR name LIKE '%√¥%' OR name LIKE '%√ª%')
        LIMIT 10
    """)

    files_with_accents = indexer.cursor.fetchall()

    if not files_with_accents:
        print("‚ùå Nenhum arquivo com acentos encontrado nos dados reais.")
        print("üí° Vou criar arquivos de teste tempor√°rios...")

        # Criar arquivos de teste se n√£o houver dados reais
        test_files = [
            {
                'id': 'real_test_1',
                'name': 'Documenta√ß√£o T√©cnica.pdf',
                'path': '/test/documentacao.pdf',
                'description': 'Documenta√ß√£o t√©cnica sobre programa√ß√£o',
                'source': 'test_real',
                'mimeType': 'application/pdf',
                'size': 1024,
                'modifiedTime': 1234567890,
                'createdTime': 1234567890,
                'parentId': None
            },
            {
                'id': 'real_test_2',
                'name': 'Relat√≥rio de Vendas - Mar√ßo.xlsx',
                'path': '/test/relatorio_marco.xlsx',
                'description': 'Relat√≥rio mensal de vendas - mar√ßo 2024',
                'source': 'test_real',
                'mimeType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'size': 2048,
                'modifiedTime': 1234567890,
                'createdTime': 1234567890,
                'parentId': None
            }
        ]

        indexer.save_files_in_batch(test_files, 'test_real')
        print("‚úÖ Arquivos de teste criados!")

        # Atualizar lista
        files_with_accents = [
            ('real_test_1', 'Documenta√ß√£o T√©cnica.pdf',
             'Documenta√ß√£o t√©cnica sobre programa√ß√£o', 'test_real'),
            ('real_test_2', 'Relat√≥rio de Vendas - Mar√ßo.xlsx',
             'Relat√≥rio mensal de vendas - mar√ßo 2024', 'test_real')
        ]

    print(f"\nüìÑ Arquivos com acentos encontrados: {len(files_with_accents)}")

    # Mostrar arquivos encontrados
    for i, (file_id, name, description, source) in enumerate(files_with_accents[:5], 1):
        print(f"  {i}. {name} ({source})")
        if description:
            desc_short = description[:50] + \
                "..." if len(description) > 50 else description
            print(f"     ‚îî‚îÄ {desc_short}")

    # Testar busca com arquivos reais
    print(f"\nüß™ TESTANDO BUSCA COM ARQUIVOS REAIS...")

    test_cases = []
    successful_tests = 0

    # Para cada arquivo com acento, extrair palavras para testar
    # Testar s√≥ primeiros 3
    for file_id, name, description, source in files_with_accents[:3]:
        # Extrair palavras com acentos do nome
        words = name.lower().split()
        for word in words:
            # Remover pontua√ß√£o b√°sica
            clean_word = word.strip('.,()[]{}"-_')
            if any(char in clean_word for char in '√£√ß√°√©√≠√≥√∫√¢√™√Æ√¥√ª√†√®√¨√≤√π') and len(clean_word) > 2:
                # Testar palavra original e normalizada
                normalized_word = normalize_text(clean_word)
                if normalized_word != clean_word:
                    test_cases.extend([
                        (clean_word, f"Palavra original de '{name}'"),
                        (normalized_word, f"Palavra normalizada de '{name}'")
                    ])
                    break  # S√≥ uma palavra por arquivo para n√£o sobrecarregar

    # Se n√£o encontramos casos de teste, usar casos gen√©ricos
    if not test_cases:
        test_cases = [
            ("documenta√ß√£o", "Palavra comum com √ß"),
            ("documentacao", "Palavra comum sem √ß"),
            ("relat√≥rio", "Palavra comum com √≥"),
            ("relatorio", "Palavra comum sem √≥"),
            ("t√©cnica", "Palavra comum com √©"),
            ("tecnica", "Palavra comum sem √©"),
            ("mar√ßo", "Palavra comum com √ß"),
            ("marco", "Palavra comum sem √ß")
        ]

    print(f"üìã Executando {len(test_cases)} testes de busca...")

    for search_term, description in test_cases:
        print(f"\nüîé Testando: '{search_term}' ({description})")

        # Simular exatamente como a UI faz a busca
        results = indexer.load_files_paged(
            source=None,  # Buscar em todas as fontes
            page=0,
            page_size=50,
            search_term=search_term.lower(),  # Como na UI
            sort_by='name_asc',
            filter_type='all',
            folder_id=None,
            advanced_filters={},
            explorer_special=False
        )

        found_count = len(results)
        print(f"  üìä Resultados encontrados: {found_count}")

        if results:
            successful_tests += 1
            print("  üìÑ Primeiros resultados:")
            for result in results[:3]:  # Mostrar s√≥ primeiros 3
                name = result.get('name', 'N/A')
                source = result.get('source', 'N/A')
                print(f"    ‚Ä¢ {name} ({source})")
        else:
            print("  ‚ùå Nenhum resultado encontrado")

        # Mostrar normaliza√ß√£o
        normalized = normalize_text(search_term)
        if normalized != search_term.lower():
            print(f"  üîÑ Normaliza√ß√£o: '{search_term}' ‚Üí '{normalized}'")

    # Estat√≠sticas finais
    total_tests = len(test_cases)
    success_rate = (successful_tests / total_tests *
                    100) if total_tests > 0 else 0

    print(f"\nüìä RESULTADOS FINAIS:")
    print(f"  ‚úÖ Testes bem-sucedidos: {successful_tests}/{total_tests}")
    print(f"  üìà Taxa de sucesso: {success_rate:.1f}%")
    print(f"  üìÅ Total de arquivos no banco: {total_files}")

    if success_rate >= 70:
        print(f"  üéâ NORMALIZA√á√ÉO FUNCIONANDO PERFEITAMENTE NO APP REAL!")
        result = True
    elif success_rate >= 50:
        print(f"  ‚úÖ NORMALIZA√á√ÉO FUNCIONANDO BEM NO APP REAL!")
        result = True
    else:
        print(f"  ‚ö†Ô∏è NORMALIZA√á√ÉO PRECISA DE AJUSTES NO APP REAL!")
        result = False

    # Limpar dados de teste se foram criados
    if not files_with_accents or all(item[3] == 'test_real' for item in files_with_accents):
        print(f"\nüßπ Limpando dados de teste tempor√°rios...")
        indexer.cursor.execute("DELETE FROM files WHERE source = 'test_real'")
        indexer.cursor.execute(
            "DELETE FROM search_index WHERE source = 'test_real'")
        indexer.conn.commit()

    indexer.close()
    return result


def test_app_integration():
    """Testa se o app est√° usando as fun√ß√µes corretas de normaliza√ß√£o"""
    print("\nüîß TESTE DE INTEGRA√á√ÉO COM O APP")
    print("=" * 40)

    # Verificar se os arquivos principais existem
    required_files = ['app.py', 'ui.py', 'database.py', 'workers.py']
    missing_files = []

    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)

    if missing_files:
        print(f"‚ùå Arquivos faltando: {', '.join(missing_files)}")
        return False

    print("‚úÖ Todos os arquivos principais encontrados")

    # Verificar se a fun√ß√£o normalize_text est√° sendo importada corretamente
    try:
        from database import normalize_text
        test_result = normalize_text("Educa√ß√£o")
        expected = "educacao"

        if test_result == expected:
            print(f"‚úÖ Fun√ß√£o normalize_text funcionando: '{test_result}'")
        else:
            print(
                f"‚ùå Fun√ß√£o normalize_text com problema: '{test_result}' (esperado: '{expected}')")
            return False
    except ImportError as e:
        print(f"‚ùå Erro importando normalize_text: {e}")
        return False

    # Verificar se o banco tem a estrutura correta
    try:
        indexer = FileIndexer('file_index.db')

        # Verificar se tabela search_index tem colunas normalizadas
        indexer.cursor.execute("PRAGMA table_info(search_index)")
        columns = [col[1] for col in indexer.cursor.fetchall()]

        expected_columns = ['name', 'description',
                            'normalized_name', 'normalized_description']
        has_normalized = all(col in columns for col in expected_columns)

        if has_normalized:
            print("‚úÖ Estrutura do banco com normaliza√ß√£o correta")
        else:
            print(f"‚ùå Banco sem colunas de normaliza√ß√£o. Colunas: {columns}")
            print("üí° Execute: python -c \"from database import FileIndexer; FileIndexer().rebuild_search_index_with_normalization()\"")
            return False

        indexer.close()

    except Exception as e:
        print(f"‚ùå Erro verificando banco: {e}")
        return False

    print("‚úÖ Integra√ß√£o com app verificada com sucesso!")
    return True


if __name__ == "__main__":
    print("üöÄ INICIANDO TESTE COMPLETO DO APLICATIVO REAL")
    print("=" * 60)

    # Teste 1: Integra√ß√£o
    integration_ok = test_app_integration()

    # Teste 2: Funcionalidade real
    if integration_ok:
        functionality_ok = test_app_normalization()
    else:
        functionality_ok = False

    print(f"\nüèÅ RESULTADO FINAL:")
    print(f"  Integra√ß√£o: {'‚úÖ OK' if integration_ok else '‚ùå FALHOU'}")
    print(f"  Funcionalidade: {'‚úÖ OK' if functionality_ok else '‚ùå FALHOU'}")

    if integration_ok and functionality_ok:
        print(f"\nüéâ PRIORIDADE 1 VALIDADA COM SUCESSO NO APP REAL!")
        print(f"üöÄ Pronto para PRIORIDADE 2: Otimizar Sincroniza√ß√£o!")
    else:
        print(f"\n‚ö†Ô∏è Alguns testes falharam. Verifique os erros acima.")
